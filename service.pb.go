// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package raft

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xcd, 0x8a, 0xc2, 0x30,
	0x14, 0x85, 0x67, 0x60, 0x98, 0x45, 0x4a, 0x19, 0x08, 0x83, 0x68, 0xc4, 0x8d, 0xee, 0xbb, 0xd0,
	0x27, 0x10, 0x74, 0xa1, 0xcb, 0x16, 0xec, 0xb2, 0x44, 0xbd, 0xc5, 0x42, 0x49, 0x62, 0xee, 0xb5,
	0xcf, 0xee, 0x52, 0xea, 0x4d, 0xfd, 0x81, 0xba, 0x3d, 0xe7, 0xcb, 0x97, 0x93, 0x88, 0x18, 0xc1,
	0x37, 0xd5, 0x01, 0x12, 0xe7, 0x2d, 0x59, 0xf9, 0xe3, 0x75, 0x49, 0xea, 0x5f, 0x3b, 0x07, 0xe6,
	0x58, 0x80, 0x21, 0x5f, 0x01, 0x72, 0xa7, 0xa4, 0x87, 0xf3, 0x05, 0x90, 0x8a, 0xc6, 0x52, 0xe0,
	0xd5, 0xa0, 0x32, 0x48, 0xba, 0xae, 0x0b, 0x34, 0xda, 0xe1, 0xc9, 0x12, 0xe7, 0xf3, 0xeb, 0xb7,
	0x88, 0x52, 0x5d, 0x52, 0xc6, 0x76, 0xb9, 0x15, 0x31, 0x3b, 0xd7, 0xac, 0x94, 0x2a, 0x69, 0x6f,
	0x4a, 0x96, 0xaf, 0x61, 0xca, 0x7e, 0x35, 0xee, 0xed, 0xd0, 0x59, 0x83, 0x30, 0xfd, 0x92, 0x2b,
	0x11, 0x85, 0x25, 0x3b, 0x4b, 0x20, 0x87, 0x4c, 0xa7, 0xcf, 0xa8, 0xf3, 0x8c, 0x7a, 0x9a, 0x87,
	0x25, 0x17, 0x7f, 0x61, 0x7b, 0x16, 0xa6, 0xcb, 0x19, 0xf3, 0x9b, 0xf7, 0x38, 0x1c, 0xcf, 0x7d,
	0xfb, 0x00, 0xaf, 0x26, 0x1f, 0xa0, 0x4e, 0xbc, 0xff, 0xbd, 0xff, 0xc0, 0xe2, 0x16, 0x00, 0x00,
	0xff, 0xff, 0xc6, 0x52, 0x81, 0xc4, 0x5a, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RaftServiceClient is the client API for RaftService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaftServiceClient interface {
	AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error)
	RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error)
	InstallSnapshot(ctx context.Context, in *InstallSnapshotRequestWrapper, opts ...grpc.CallOption) (*InstallSnapshotResponse, error)
}

type raftServiceClient struct {
	cc *grpc.ClientConn
}

func NewRaftServiceClient(cc *grpc.ClientConn) RaftServiceClient {
	return &raftServiceClient{cc}
}

func (c *raftServiceClient) AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error) {
	out := new(AppendEntriesResponse)
	err := c.cc.Invoke(ctx, "/raft.RaftService/appendEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServiceClient) RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error) {
	out := new(RequestVoteResponse)
	err := c.cc.Invoke(ctx, "/raft.RaftService/requestVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServiceClient) InstallSnapshot(ctx context.Context, in *InstallSnapshotRequestWrapper, opts ...grpc.CallOption) (*InstallSnapshotResponse, error) {
	out := new(InstallSnapshotResponse)
	err := c.cc.Invoke(ctx, "/raft.RaftService/installSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftServiceServer is the server API for RaftService service.
type RaftServiceServer interface {
	AppendEntries(context.Context, *AppendEntriesRequest) (*AppendEntriesResponse, error)
	RequestVote(context.Context, *RequestVoteRequest) (*RequestVoteResponse, error)
	InstallSnapshot(context.Context, *InstallSnapshotRequestWrapper) (*InstallSnapshotResponse, error)
}

func RegisterRaftServiceServer(s *grpc.Server, srv RaftServiceServer) {
	s.RegisterService(&_RaftService_serviceDesc, srv)
}

func _RaftService_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftService/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).AppendEntries(ctx, req.(*AppendEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftService_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftService/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).RequestVote(ctx, req.(*RequestVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftService_InstallSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallSnapshotRequestWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).InstallSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftService/InstallSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).InstallSnapshot(ctx, req.(*InstallSnapshotRequestWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

var _RaftService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "raft.RaftService",
	HandlerType: (*RaftServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "appendEntries",
			Handler:    _RaftService_AppendEntries_Handler,
		},
		{
			MethodName: "requestVote",
			Handler:    _RaftService_RequestVote_Handler,
		},
		{
			MethodName: "installSnapshot",
			Handler:    _RaftService_InstallSnapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
