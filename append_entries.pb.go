// Code generated by protoc-gen-go. DO NOT EDIT.
// source: append_entries.proto

package raft

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AppendEntriesRequest struct {
	// Required field on all requests.
	Header *RPCHeader `protobuf:"bytes,1,opt,name=Header,proto3" json:"Header,omitempty"`
	// Provide the current term and leader
	Term   uint64 `protobuf:"varint,2,opt,name=Term,proto3" json:"Term,omitempty"`
	Leader []byte `protobuf:"bytes,3,opt,name=Leader,proto3" json:"Leader,omitempty"`
	// Provide the previous entries for integrity checking
	PrevLogEntry uint64 `protobuf:"varint,4,opt,name=PrevLogEntry,proto3" json:"PrevLogEntry,omitempty"`
	PrevLogTerm  uint64 `protobuf:"varint,5,opt,name=PrevLogTerm,proto3" json:"PrevLogTerm,omitempty"`
	// New entries to commit
	Entries []*Log `protobuf:"bytes,6,rep,name=Entries,proto3" json:"Entries,omitempty"`
	// Commit index on the leader
	LeaderCommitIndex    uint64   `protobuf:"varint,7,opt,name=LeaderCommitIndex,proto3" json:"LeaderCommitIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppendEntriesRequest) Reset()         { *m = AppendEntriesRequest{} }
func (m *AppendEntriesRequest) String() string { return proto.CompactTextString(m) }
func (*AppendEntriesRequest) ProtoMessage()    {}
func (*AppendEntriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b4beeedbaf7b49a, []int{0}
}

func (m *AppendEntriesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendEntriesRequest.Unmarshal(m, b)
}
func (m *AppendEntriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendEntriesRequest.Marshal(b, m, deterministic)
}
func (m *AppendEntriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendEntriesRequest.Merge(m, src)
}
func (m *AppendEntriesRequest) XXX_Size() int {
	return xxx_messageInfo_AppendEntriesRequest.Size(m)
}
func (m *AppendEntriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendEntriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AppendEntriesRequest proto.InternalMessageInfo

func (m *AppendEntriesRequest) GetHeader() *RPCHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AppendEntriesRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesRequest) GetLeader() []byte {
	if m != nil {
		return m.Leader
	}
	return nil
}

func (m *AppendEntriesRequest) GetPrevLogEntry() uint64 {
	if m != nil {
		return m.PrevLogEntry
	}
	return 0
}

func (m *AppendEntriesRequest) GetPrevLogTerm() uint64 {
	if m != nil {
		return m.PrevLogTerm
	}
	return 0
}

func (m *AppendEntriesRequest) GetEntries() []*Log {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *AppendEntriesRequest) GetLeaderCommitIndex() uint64 {
	if m != nil {
		return m.LeaderCommitIndex
	}
	return 0
}

type AppendEntriesResponse struct {
	// Required field on all requests.
	Header *RPCHeader `protobuf:"bytes,1,opt,name=Header,proto3" json:"Header,omitempty"`
	// Newer term if leader is out of date
	Term uint64 `protobuf:"varint,2,opt,name=Term,proto3" json:"Term,omitempty"`
	// Last log is a hint to help accelerate rebuilding slow nodes
	LastLog uint64 `protobuf:"varint,3,opt,name=LastLog,proto3" json:"LastLog,omitempty"`
	// We may not succeed if we have a conflicting entry
	Success bool `protobuf:"varint,4,opt,name=Success,proto3" json:"Success,omitempty"`
	// There are scenarios where this request didn't succeed
	// but there's no need to wait/back-off the next attempt.
	NoRetryBackoff       bool     `protobuf:"varint,5,opt,name=NoRetryBackoff,proto3" json:"NoRetryBackoff,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppendEntriesResponse) Reset()         { *m = AppendEntriesResponse{} }
func (m *AppendEntriesResponse) String() string { return proto.CompactTextString(m) }
func (*AppendEntriesResponse) ProtoMessage()    {}
func (*AppendEntriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b4beeedbaf7b49a, []int{1}
}

func (m *AppendEntriesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendEntriesResponse.Unmarshal(m, b)
}
func (m *AppendEntriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendEntriesResponse.Marshal(b, m, deterministic)
}
func (m *AppendEntriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendEntriesResponse.Merge(m, src)
}
func (m *AppendEntriesResponse) XXX_Size() int {
	return xxx_messageInfo_AppendEntriesResponse.Size(m)
}
func (m *AppendEntriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendEntriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AppendEntriesResponse proto.InternalMessageInfo

func (m *AppendEntriesResponse) GetHeader() *RPCHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AppendEntriesResponse) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesResponse) GetLastLog() uint64 {
	if m != nil {
		return m.LastLog
	}
	return 0
}

func (m *AppendEntriesResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AppendEntriesResponse) GetNoRetryBackoff() bool {
	if m != nil {
		return m.NoRetryBackoff
	}
	return false
}

func init() {
	proto.RegisterType((*AppendEntriesRequest)(nil), "raft.AppendEntriesRequest")
	proto.RegisterType((*AppendEntriesResponse)(nil), "raft.AppendEntriesResponse")
}

func init() { proto.RegisterFile("append_entries.proto", fileDescriptor_5b4beeedbaf7b49a) }

var fileDescriptor_5b4beeedbaf7b49a = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x51, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x25, 0x6d, 0x4c, 0xdb, 0x69, 0xf1, 0x63, 0xa9, 0xb2, 0xf4, 0x14, 0x22, 0x68, 0x0e, 0x92,
	0x43, 0xfd, 0x05, 0x5a, 0x04, 0x85, 0x20, 0x65, 0xf5, 0x5e, 0x62, 0x32, 0x89, 0x45, 0x93, 0x8d,
	0xbb, 0x5b, 0xb1, 0x77, 0x7f, 0x90, 0x3f, 0x51, 0x32, 0x9b, 0x80, 0xd6, 0xa3, 0xb7, 0x7d, 0xef,
	0xcd, 0x7b, 0x33, 0xbc, 0x85, 0x69, 0x52, 0xd7, 0x58, 0x65, 0x2b, 0xac, 0x8c, 0x5a, 0xa3, 0x8e,
	0x6a, 0x25, 0x8d, 0x64, 0xae, 0x4a, 0x72, 0x33, 0x1b, 0xbd, 0xca, 0xc2, 0x12, 0xb3, 0x43, 0x55,
	0xa7, 0xab, 0x67, 0x4c, 0x32, 0x54, 0x96, 0x09, 0x3e, 0x7b, 0x30, 0xbd, 0x22, 0xef, 0x8d, 0xb5,
	0x0a, 0x7c, 0xdb, 0xa0, 0x36, 0xec, 0x1c, 0xbc, 0x5b, 0x1a, 0xe4, 0x8e, 0xef, 0x84, 0xe3, 0xf9,
	0x41, 0xd4, 0x84, 0x45, 0x62, 0xb9, 0xb0, 0xb4, 0x68, 0x65, 0xc6, 0xc0, 0x7d, 0x44, 0x55, 0xf2,
	0x9e, 0xef, 0x84, 0xae, 0xa0, 0x37, 0x3b, 0x01, 0x2f, 0xb6, 0xe6, 0xbe, 0xef, 0x84, 0x13, 0xd1,
	0x22, 0x16, 0xc0, 0x64, 0xa9, 0xf0, 0x3d, 0x96, 0x45, 0xb3, 0x6d, 0xcb, 0x5d, 0xf2, 0xfc, 0xe2,
	0x98, 0x0f, 0xe3, 0x16, 0x53, 0xec, 0x1e, 0x8d, 0xfc, 0xa4, 0xd8, 0x29, 0x0c, 0xda, 0x63, 0xb9,
	0xe7, 0xf7, 0xc3, 0xf1, 0x7c, 0x64, 0x6f, 0x8b, 0x65, 0x21, 0x3a, 0x85, 0x5d, 0xc0, 0x91, 0x5d,
	0xba, 0x90, 0x65, 0xb9, 0x36, 0x77, 0x55, 0x86, 0x1f, 0x7c, 0x40, 0x61, 0x7f, 0x85, 0xe0, 0xcb,
	0x81, 0xe3, 0x9d, 0x1a, 0x74, 0x2d, 0x2b, 0x8d, 0xff, 0xeb, 0x81, 0xc3, 0x20, 0x4e, 0xb4, 0x89,
	0x65, 0x41, 0x45, 0xb8, 0xa2, 0x83, 0x8d, 0xf2, 0xb0, 0x49, 0x53, 0xd4, 0x9a, 0x4a, 0x18, 0x8a,
	0x0e, 0xb2, 0x33, 0xd8, 0xbf, 0x97, 0x02, 0x8d, 0xda, 0x5e, 0x27, 0xe9, 0x8b, 0xcc, 0x73, 0xaa,
	0x60, 0x28, 0x76, 0xd8, 0x27, 0x8f, 0x3e, 0xf0, 0xf2, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xaf, 0x6f,
	0xad, 0x39, 0xfb, 0x01, 0x00, 0x00,
}
